[project]
name = "{{ project_name }}"
version = "0.1.0"
description = "{{ project_description }}"
authors = [
    {name = "{{ author_name }}", email = "{{ author_email }}"}
]
readme = "README.md"
requires-python = ">={{ python_version }}"
{% if license != "None" -%}
license = {text = "{{ license }}"}
{% endif %}

dependencies = [
    "polars>=0.20.0",
    "pandas>=2.0.0",
    "pyarrow>=15.0.0",
    {% if include_marimo -%}
    "marimo>=0.6.0",
    {% endif -%}
    {% if include_jupyter -%}
    "jupyter>=1.0.0",
    "ipykernel>=6.29.0",
    {% endif -%}
    "matplotlib>=3.8.0",
    "seaborn>=0.13.0",
    "plotly>=5.20.0",
    "numpy>=1.24.0",
    "scipy>=1.10.0",
    "scikit-learn>=1.4.0",
    "python-dotenv>=1.0.0",
    "requests>=2.31.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "pytest-cov>=4.1.0",
    "ruff>=0.4.0",
    "mypy>=1.10.0",
    "pre-commit>=3.7.0",
]

{% if include_ml_extras -%}
ml-extra = [
    "xgboost>=2.0.0",
    "lightgbm>=4.3.0",
    "statsmodels>=0.14.0",
]
{% endif -%}

{% if include_docs -%}
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.5.0",
]
{% endif -%}

all = [
    "{{ project_name }}[dev{% if include_ml_extras %},ml-extra{% endif %}{% if include_docs %},docs{% endif %}]",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/{{ project_slug }}"]

[tool.hatch.metadata]
allow-direct-references = true

[tool.ruff]
line-length = 100
target-version = "py{{ python_version | replace('.', '') }}"
src = ["src", "tests"]

[tool.ruff.lint]
select = ["E", "W", "F", "I", "N", "UP", "B", "C4", "PTH"]
ignore = ["E501", "B008"]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["S101"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_functions = ["test_*"]
addopts = """
    -v
    --strict-markers
    --tb=short
    --cov=src/{{ project_slug }}
    --cov-report=term-missing
    --cov-report=html
"""

[tool.mypy]
python_version = "{{ python_version }}"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
ignore_missing_imports = true
exclude = ["^notebooks/", "^tests/"]

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/__pycache__/*", "*/.venv/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]